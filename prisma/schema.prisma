// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String       @id @default(uuid())
  name        String      @unique
  email       String      @unique
  userImage   String
  password    String
  role       UserRole?   @default(USER)
 needPasswordChange Boolean    @default(true)
  status      UserStatus   @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  foundItems  FoundItem[] 
  claims      Claim[]
  profile     UserProfile?
}


model FoundItemCategory {
  id          String        @id @default(uuid())
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  foundItems  FoundItem[]
 
}


model FoundItem {
  id              String       @id @default(uuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  categoryId      String
  category        FoundItemCategory @relation(fields: [categoryId], references: [id])
  foundItemName   String
  description     String
  location        String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

 claims             Claim[]
}


model Claim {
  id                   String    @id @default(uuid())
  userId               String
  user                 User      @relation(fields: [userId], references: [id])
  foundItemId          String
  foundItem            FoundItem @relation(fields: [foundItemId], references: [id])

  status               ClaimStatus    @default(PENDING)
  distinguishingFeatures String?
  lostDate             DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}


model UserProfile {
  id          String       @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique
  bio         String?
  age         String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
USER
ADMIN
SuperAdmin
}

enum UserStatus {
  ACTIVE
  Deleted
}