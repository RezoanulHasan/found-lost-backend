// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  name         String       @unique
  email        String       @unique
  userImage    String
  password     String
  role         UserRole?    @default(USER)
  phoneNumber  String?
  status       UserStatus   @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
   needPasswordChange Boolean    @default(true)
  foundItems   FoundItem[]
  claims       Claim[]
  lostItems    LostItem[]
  profile      UserProfile?
}

model FoundItem {
  id                String       @id @default(uuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id])
  category          String
  foundItemName     String
  description       String
  location          String
  date              String?
  image             String?
  phoneNumber       String?
  email             String?
   status       FoundStatus  @default(PENDING)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  claims            Claim[]
}

model LostItem {
  id                String       @id @default(uuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id])
  category          String
  lostItemName      String
  description       String
  location          String
  date              String?
  image             String?
  phoneNumber       String?
  email             String?

  status            LostStatus   @default(LOST)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  claims            Claim[]
}

model Claim {
  id                   String       @id @default(uuid())
  userId               String
  user                 User         @relation(fields: [userId], references: [id])
  foundItemId          String?
  foundItem            FoundItem?   @relation(fields: [foundItemId], references: [id])
  lostItemId           String?
  lostItem             LostItem?    @relation(fields: [lostItemId], references: [id])
  status               ClaimStatus  @default(PENDING)
  distinguishingFeatures String?
  lostDate             String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model UserProfile {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  bio         String?
  age         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}


enum FoundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LostStatus {
  LOST
  FOUND
}

enum UserRole {
  USER
  ADMIN
SuperAdmin
}

enum UserStatus {
  ACTIVE
  DELETED
}
